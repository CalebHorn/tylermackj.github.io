{"version":3,"sources":["assets/components/Splash.js","assets/components/Map.js","assets/components/Weather.js","assets/components/WeatherMap.js","App.js","serviceWorker.js","index.js"],"names":["Splash","props","className","type","onChange","handleAddressChange","onKeyDown","handleAddressSubmit","Map","title","frameBorder","style","border","src","lat","lng","allowFullScreen","String","prototype","capitalize","this","replace","a","toUpperCase","Weather","state","temp","desc","high","low","fetch","then","response","json","data","setState","React","Component","WeatherMap","onClick","handleBack","App","address","splash","getLatLng","bind","event","target","value","key","show","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.143a331e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../style/css/Splash.min.css\";\r\n\r\nfunction Splash(props) {\r\n    return (\r\n        <div className=\"Splash\">\r\n            <div className=\"Title\">Weather Location</div>\r\n            <div className=\"Instructions\">\r\n                Enter and andress or zipcode to find out about your location!\r\n            </div>\r\n            <div className=\"Input\">\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={props.handleAddressChange}\r\n                    onKeyDown={props.handleAddressSubmit}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Splash;\r\n","import React from \"react\";\r\n\r\nimport \"../style/css/Map.min.css\";\r\n\r\nfunction Map(props) {\r\n    return (\r\n        <div className=\"Map\">\r\n            <iframe\r\n                title=\"GoogleMaps\"\r\n                frameBorder=\"0\"\r\n                style={{ border: \"0px\" }}\r\n                src={\r\n                    \"https://www.google.com/maps/embed/v1/view?key=AIzaSyDNRmufQHfCRrlCbsx_n_VNoSSploKRB2c&center=\" +\r\n                    props.lat +\r\n                    \",\" +\r\n                    props.lng +\r\n                    \"&zoom=18&maptype=satellite\"\r\n                }\r\n                allowFullScreen\r\n            ></iframe>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\n\r\nimport \"../style/css/Weather.min.css\"\r\n\r\nString.prototype.capitalize = function () {\r\n    return this.replace(/(?:^|\\s)\\S/g, function (a) { return a.toUpperCase(); });\r\n};\r\n\r\nclass Weather extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { temp: \"\", desc: \"\", high: \"\", low: \"\" };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\r\n            \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\r\n            this.props.lat +\r\n            \"&lon=\" +\r\n            this.props.lng +\r\n            \"&units=imperial&appid=ca21dc061cfbfac4c0dd566e7366af0b&mode=json\"\r\n        )\r\n            .then(response => {\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                this.setState({\r\n                    temp: data[\"main\"][\"temp\"],\r\n                    desc: data[\"weather\"][0][\"description\"],\r\n                    high: data[\"main\"][\"temp_max\"],\r\n                    low: data[\"main\"][\"temp_min\"]\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"Weather\">\r\n            <ul>\r\n                <li>Temperature: {this.state.temp} (High: {this.state.high} | Low: {this.state.low})</li>\r\n                <li>Description: {this.state.desc.capitalize()}</li>\r\n            </ul>\r\n            <br />\r\n            <br />\r\n            <br />\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Weather;","import React from \"react\";\r\n\r\nimport \"../style/css/WeatherMap.min.css\"\r\n\r\nimport Map from \"./Map\";\r\nimport Weather from \"./Weather\";\r\n\r\nfunction WeatherMap(props) {\r\n    return <div className=\"WeatherMap\">\r\n        <button onClick={props.handleBack}>Go Back</button>\r\n        <Map lat={props.lat} lng={props.lng} />\r\n        <Weather lat={props.lat} lng={props.lng} />\r\n    </div>\r\n}\r\n\r\nexport default WeatherMap;","import React from \"react\";\nimport \"./assets/style/css/App.min.css\";\n\nimport Splash from \"./assets/components/Splash\";\nimport WeatherMap from \"./assets/components/WeatherMap\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { address: \" \", splash: true, lat: \"\", lng: \"\" };\n\n        this.getLatLng = this.getLatLng.bind(this);\n        this.handleAddressChange = this.handleAddressChange.bind(this);\n        this.handleAddressSubmit = this.handleAddressSubmit.bind(this);\n        this.handleBack = this.handleBack.bind(this);\n    }\n\n    getLatLng() {\n        fetch(\n            \"https://api.opencagedata.com/geocode/v1/json?q=\" +\n            this.state.address.replace(\" \", \"+\") +\n            \"&key=e421c57a76e94cd09927951f605c5bf1\"\n        )\n            .then(response => {\n                return response.json();\n            })\n            .then(data => {\n                this.setState({\n                    lat: data[\"results\"][0][\"geometry\"][\"lat\"],\n                    lng: data[\"results\"][0][\"geometry\"][\"lng\"],\n                    splash: false\n                });\n            });\n    }\n\n    handleAddressChange(event) {\n        if (event.target.value === \"\") {\n            this.setState({ address: \" \" });\n        } else {\n            this.setState({ address: event.target.value });\n        }\n    }\n\n    handleAddressSubmit(event) {\n        if (event.key === \"Enter\") {\n            this.getLatLng();\n        }\n    }\n\n    handleBack(event) {\n        this.setState({ splash: true });\n    }\n\n    render() {\n        let show;\n        if (this.state.splash) {\n            show = (\n                <Splash\n                    handleAddressChange={this.handleAddressChange}\n                    handleAddressSubmit={this.handleAddressSubmit}\n                ></Splash>\n            );\n        } else {\n            show = (\n                <WeatherMap lat={this.state.lat} lng={this.state.lng} handleBack={this.handleBack} />\n            );\n        }\n        return <div className=\"App\">{show}</div>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/style/css/Index.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}